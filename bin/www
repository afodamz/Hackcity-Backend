var app = require('../index');
var debug = require('debug')('hackcityapi:server');
var http = require('http');
const dbConnection = require('./../config/db');
const io = require('socket.io')(http);

const port = normalizePort(process.env.PORT || 8000);
app.set('port', port);

var server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

let dbOption;
if (process.env.ENVIRONMENT === 'DEVELOPMENT') {
    dbOption = { alter: true };
} else {
    dbOption = { force: false, alter: true };
}
const init = async () => {
    await dbConnection.sync(dbOption)
        .then(() => {
            console.log("Synced db.");
        })
        .catch((err) => {
            console.log("Failed to sync db: " + err.message);
        });
};

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

io.on('connection', (socket) => {
    console.log('Client connected');
  
    // socket.on('message', (msg) => {
    //   console.log('Received message:', msg);
  
    //   // Broadcast message to all connected clients
    //   socket.broadcast.emit('message', msg);
    // });
  
    socket.on('disconnect', () => {
      console.log('Client disconnected');
    });
  });

/**
* Event listener for HTTP server "error" event.
*/

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log('bind', bind)
    debug('Listening on ' + bind);
    init()
}